li <- lapply(station, function(x) {
monitor <- read.csv(x)
if(pollutant == "nitrate") {
monitor$nitrate
} else if(pollutant == "sulfate") {
monitor$sulfate
}
})
myMean <- mean(unlist(li), na.rm = TRUE)
return(myMean)
}
pollutantmean("specdata", "sulfate", 1:20)
?file.path
?sprintf
pollutantmean <- function(directory, pollutant, id = 1:332) {
station <- file.path(directory, x)
li <- lapply(station, function(x) {
monitor <- read.csv(x)
if(pollutant == "nitrate") {
monitor$nitrate
} else if(pollutant == "sulfate") {
monitor$sulfate
}
})
myMean <- mean(unlist(li), na.rm = TRUE)
return(myMean)
}
pollutantmean("specdata", "sulfate", 1:20)
# 3rd method
pollutantmean <- function(directory, pollutant, id = 1:332) {
for(monitor in id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
monitor_data <- read.csv(path)
interested_data <- monitor_data[pollutant]
means <- c(means, interested_data[!is.na(interested_data)])
}
mean(means)
}
pollutantmean("specdata", "sulfate", 1:20)
# 3rd method
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- c()
for(monitor in id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
monitor_data <- read.csv(path)
interested_data <- monitor_data[pollutant]
means <- c(means, interested_data[!is.na(interested_data)])
}
mean(means)
}
pollutantmean("specdata", "sulfate", 1:20)
# 3rd method
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- c()
for(monitor in id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
monitor_data <- read.csv(path)
interested_data <- monitor_data[pollutant]
means <- c(means, interested_data[!is.na(interested_data)])
}
mean(means)
}
pollutantmean("specdata", "sulfate", 1:20)
# 3rd method
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- c()
for(monitor in id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
files <- read.csv(path)
data <- files[pollutant]
means <- c(means, data[!is.na(data)])
}
mean(means)
}
pollutantmean("specdata", "sulfate", 1:20)
pollutantmean<- function(directory, pollutant, id= 1:332){
file_paths<- list.files(directory, full.names= TRUE, pattern = "\\.csv$")
for(file in 1:length(file_paths)) {
filepath = file_paths[file]
if(file == 1) {
temp <- as.data.frame(read.csv(filepath, header=TRUE))
} else {
temp <- rbind(temp, as.data.frame(read.csv(filepath)))
}
}
temp_sub <- temp[(temp$ID %in% id), c(pollutant)]
mean(temp_sub, na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", 1:20)
# 3rd method
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- c()
for(monitor in id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
files <- read.csv(path)
data <- files[pollutant]
means <- c(means, data[!is.na(data)])
}
mean(means)
}
pollutantmean("specdata", "sulfate", 1:20)
pollutantmean("specdata", "sulfate", 23)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
complete <- function(directory, id = 1:332){
## 'director' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the from:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results <- data.frame(id=numeric(0), nobs=numeric(0))
for(monitor in id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
monitor_data <- read.csv(path)
interested_data <- monitor_data[(!is.na(monitor_data$sulfate)), ]
interested_data <- interested_data[(!is.na(interested_data$nitrate)), ]
nobs <- nrow(interested_data)
results <- rbind(results, data.frame(id=monitor, nobs=nobs))
}
results
}
complete("specdata", 3)
complete <- function(directory, id = 1:332){
## 'director' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the from:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results <- data.frame(id=numeric(0), nobs=numeric(0))
for(monitor in id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
files <- read.csv(path)
data <- files[(!is.na(files$sulfate)), ]
data1 <- data[(!is.na(data$nitrate)), ]
nobs <- nrow(data1)
results <- rbind(results, data.frame(id=monitor, nobs=nobs))
}
results
}
complete("specdata", 3)
complete("specdata", 3)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
?paste
rm(list = ls())
setwd("C:/Users/Ramesh/OneDrive/R_STAT/Coursera/DataScience")
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- c()
for(monitor in id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
files <- read.csv(path)
data <- files[pollutant]
means <- c(means, data[!is.na(data)])
}
mean(means)
}
pollutantmean("specdata", "sulfate", 1:10)
rm(list = ls())
complete <- function(directory, id = 1:332){
## 'director' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the from:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results <- data.frame(id=numeric(0), nobs=numeric(0))
for(monitor in id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
files <- read.csv(path)
data <- files[(!is.na(files$sulfate)), ]
data1 <- data[(!is.na(data$nitrate)), ]
nobs <- nrow(data1)
results <- rbind(results, data.frame(id=monitor, nobs=nobs))
}
results
}
complete("specdata", c(2, 4, 8, 10, 12))
corr <- function(directory, threshold = 0){
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) requi?red to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
cor_results <- numeric(0)
complete_cases <- complete(directory)
complete_cases <- complete_cases[complete_cases$nobs>=threshold, ]
#print(complete_cases["id"])
#print(unlist(complete_cases["id"]))
#print(complete_cases$id)
if(nrow(complete_cases)>0){
for(monitor in complete_cases$id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
#print(path)
monitor_data <- read.csv(path)
#print(monitor_data)
interested_data <- monitor_data[(!is.na(monitor_data$sulfate)), ]
interested_data <- interested_data[(!is.na(interested_data$nitrate)), ]
sulfate_data <- interested_data["sulfate"]
nitrate_data <- interested_data["nitrate"]
cor_results <- c(cor_results, cor(sulfate_data, nitrate_data))
}
}
cor_results
}
pollutantmean("specdata", "sulfate", 1:10)
cr <- corr("specdata", 150)
summary(cr)
cr <- corr("specdata", 150)
summary(cr)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
debug(ls)
ls()
data(mtcars)
# How can one calculate the average miles per gallon (mpg) by number of
# cylinders in the car (cyl)? Select all that apply.
# all of the following
tapply(mtcars$mpg, mtcars$cyl, mean) # mean variable comes first, and then grouping variable, and function)
with(mtcars, tapply(mpg, cyl, mean))
data(mtcars)
# How can one calculate the average miles per gallon (mpg) by number of
# cylinders in the car (cyl)? Select all that apply.
# all of the following
tapply(mtcars$mpg, mtcars$cyl, mean) # mean variable comes first, and then grouping variable, and function)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
x<- mean(mtcars$hp[mtcars$cyl == "8"])
y<- mean(mtcars$hp[mtcars$cyl == "4"])
round(x-y)
# Week 3, swirl practice
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo
class(flags)
cls_list<- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect<- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
# repeat this operation for each of the colors recorded in the dataset
flag_colors<- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat<- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 6, 6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
swirl()
# Week 3, swirl practice
library(swirl)
ls()
ls()
type rm(list=ls())
type rm(list=ls()
rm(list=ls())
getwd()
ls("progR_week3/")
ls()
file.edit("cachematrix.R")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m<- NULL
set<- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
x <- matrix(1:20, 2, 3)
x <- matrix(1:18, 2, 3)
x <- matrix(1:6, 2, 3)
x
solve (x)
x <- matrix(1:4, 2, 2)
x
solve (x)
y<- solve (x)
x*y
x <- matrix(c(4,7,2,6), 2, 2)
x
x <- matrix(c(4,2,7,6), 2, 2)
x
y<- solve (x)
y
x*y
det(x)
x <- matrix(c(4,2,7,6), nrow = 2, byrow = TRUE)
x
x <- matrix(c(1:4), nrow = 2, byrow = TRUE)
x
makeCacheMatrix <- function(x = matrix()) {
m<- NULL
set<- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
a <- matrix(c(1:4), nrow = 2, byrow = TRUE)
cacheSolve(a)
x<- 1:20
x
a<- 1:20
a
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
cacheSolve(a)
is.data.frame(a)
a <- as.data.frame(matrix(c(1:4), nrow = 2, byrow = TRUE))
a
makeCacheMatrix <- function(x = matrix()) {
m<- NULL
set<- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
cacheSolve(a)
det(a)
a <- 1:4, nrow = 2, byrow = TRUE)
a <- 1:4, nrow = 2, byrow = TRUE
a <- (1:4, nrow = 2, byrow = TRUE)
a <- (1:4, nrow = 2, byrow = TRUE)
a <- 1:4
makeCacheMatrix <- function(x = matrix()) {
m<- NULL
set<- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
cacheSolve(a)
# Testing the function
a<-- matrix(1:4, nrow=2, byrow=TRUE)
solve(a)
a1<- makeCacheMatrix(a)
cacheSolve(a1)
cacheSolve(a1)
